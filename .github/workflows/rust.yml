name: Build and Publish

on:
  push:
    branches: [ "*" ]
  pull_request:

env:
  CARGO_TERM_COLOR: always
  RUST_LOG: debug
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@1.86.0

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install Rust target
        run: rustup target add x86_64-unknown-linux-gnu

      - name: Build
        env:
          RUSTFLAGS: '-C target-feature=+crt-static'
        run: cargo build --release --target x86_64-unknown-linux-gnu --workspace --verbose

      - name: Install cargo-nextest
        uses: taiki-e/install-action@nextest

      - name: Run tests
        env:
          RUST_TEST_THREADS: 5
        run: cargo nextest run --workspace --status-level all

      - name: Setup build context
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          mkdir -p build-context/config build-context/crates
          cp Cargo.toml Cargo.lock build-context/
          cp -r crates/groups_relay crates/websocket_builder crates/load_tester build-context/crates/
          cp crates/groups_relay/config/settings.yml build-context/config/
          cp -r frontend build-context/

      - name: Install cosign
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'

      - name: Set up Docker Buildx
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=sha,prefix=

      - name: Build and push Docker image
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: build-context
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign the published Docker image
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    container:
      image: xd009642/tarpaulin:0.31.5
      options: --security-opt seccomp=unconfined

    steps:
      - uses: actions/checkout@v4

      - name: Generate code coverage
        run: |
          cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
